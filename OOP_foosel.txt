OOP Foosel :

pengertian OOP secara umum :
OOP(Object Oriented Programming) meruapakan paradigma pemrograman dengan konsep objek,
yang dimana setiap objek terdiri dari atribut dan metode yang digunakan untuk memanipulasi objek.

Konsep OOP :
- Class
- Object
- Encapsulation v
- Inheritance v
- Polymorphism v
- Abstraction
- Composition
- Association
- Aggregation
- Dependency

Konsep Pengembangan/Tambahan OOP :
- SOLID Principles
	- Single Responsibility Principle (SRP)
	- Open/Closed Principle (OCP)
	- Liskov Substitution Principle (LSP)
	- Interface Segregation Principle (ISP)
	- Dependency Inversion Principle (DIP)
- Design Patterns
	- Factory
	- Singleton
	- Observer
	- Strategy
	- Adapter
- Metode Pengembangan OOP
	- Object-Oriented Analysis and Design (OOAD)
	- Object-Oriented Modeling (OOM)
- Anti-Patterns
	- God Class
	- Spaghetti Code
- Konsep Lanjutan
	- Reflection
	- Metaprogramming
	- Aspect-Oriented Programming (AOP)
- Dependency Injection (DI)
- Template Method Pattern
- State Pattern
- Command Pattern
- Builder Pattern
- Model-View-ViewModel (MVVM)
- Database Management in OOP:
	- Penggunaan ORM (Object-Relational Mapping)
- Caching Strategies
- Event-Driven Programming
- Cross-Cutting Concerns

Berikut adalah beberapa contoh kombinasi konsep OOP yang sering digunakan bersamaan:

- SOLID Principles + Design Patterns
- Abstraction + Encapsulation + Inheritance + Polymorphism + Design Patterns
- Object-Oriented Analysis and Design (OOAD) + Design Patterns + Refactoring
- Dependency Injection + Dependency Inversion Principle + Design Patterns
- Model-View-Controller (MVC) + Observer Pattern + Design Patterns
====================================================

- Class adalah blueprint atau cetakan untuk menciptakan objek. Class mendefinisikan atribut (variabel) dan metode (fungsi) yang dimiliki oleh objek. Dalam OOP, objek diciptakan dari sebuah class.
	contoh class dan isinya:
class ClassConnectionDialog with DialogBasic, NavigasiRole, NavigasiRoleBarRead implements InterfacesClassConnectionDialog{
  @override
  void basicConnection({
    required BuildContext context,
    required VoidCallback onTap,
    required bool buttonConnection,
  })async {
    ThemeBox(context);
    var _listener = InternetConnectionChecker().onStatusChange.listen((status){
      if (status == InternetConnectionStatus.disconnected) {
        voidDialogBasic(
          margin: EdgeInsets.symmetric(horizontal: ThemeBox.defaultWidthBox30, vertical: MediaQuery.of(context).size.height * 0.3),
          padding: EdgeInsets.only(left: ThemeBox.defaultWidthBox30, right: ThemeBox.defaultWidthBox30, top: ThemeBox.defaultHeightBox30),
          borderRadius: BorderRadius.circular(ThemeBox.defaultRadius10),
          color: kBlackColor6,
          context: context, 
          closeIconStatus: false,
          barrierDismissible: true,
          contentDialog: (buttonConnection == false) 
          ? ComponenContentDialog_ImageAndTitleTextAndText(
              titleText: 'Koneksi Internet Terputus', 
              image: 'asset/animations/wifi_disconnect.json',
              text: 'penggunaan aplikasi akan dibatasi karena aplikasi dalam mode offline',
            )
          : ComponenContentDialog_ImageAndTitleTextAndButtonRefresh(
              text: 'Koneksi Internet Terputus',
              image: 'asset/animations/wifi_disconnect.json',
              onTapRefresh: () {
               navigasiRBR(context: context, value: 0);
               navigasiR();
               context.go(navigation);
              },
            ),
          onTapCloseDialog: onTap,
        );
      }
    });
    Future.delayed(
      const Duration(seconds: 30),
      () => _listener.cancel(),
    ); 
  }
}

=================================================

- Object adalah hasil instansiasi dari sebuah class. Ketika membuat sebuah objek dari sebuah class, objek tersebut akan memiliki atribut (variabel) dan metode (fungsi) sesuai dengan definisi class tersebut. dan melalui objek tersebut, kita Dapat mengakses atribut dan metode yang didefinisikan dalam class tersebut.
	contoh 
ClassConnectionDialog _connection = ClassConnectionDialog();
_connection.basicConnection(context: context, onTap: (){Navigator.of(context).pop();}, buttonConnection: false);

==================================================

- Encapsulation merupakan cara untuk mengatur akses data dan properti. 
  Dalam konteks flutter digunakan untuk mengatur penggunaan widget serta logika yang ada didalam class, dengan tujuan untuk meningkatkan keamanan, keterbacaan, dan pemeliharaan kode.
  contoh penerapan Encapsulation dalam Bloc:
  class BlocUploadInsertProduct extends Bloc<DataEventAddBarang, StateAddPostBarang> with SharedPref implements InterfacesUploadProduct{
    final InterfacePostDataProduct _postDataProduct = getItInstance<InterfacePostDataProduct>();
    BlocUploadInsertProduct() : super(AddPostBarang(loading: false, snackBar: false, responApi: '-')){
      on<ButtonFormProducts>((event, emit) async{
        uploadProduct(
          nameProduct: event.nameProduct,
          price: event.price,
          description: event.description,
          type: event.type,
          image: event.image,
          images: event.images, 
          context: event.context,
        );
      });
    }

    @override
    Future<void> uploadProduct({
      required String nameProduct, 
      required String price, 
      required String description, 
      required XFile? image, 
      required List images, 
      required String type, 
      required BuildContext context,
    }) async {
      emit(AddPostBarang(loading: true, snackBar: false, responApi: '-'));
      await sharedPref();
      String _responPostProducts = await _postDataProduct.postDataProduct(
        email: prefs.getString('email').toString(),
        description: description, 
        name: nameProduct,
        price: price,
        image: image,
        images: images,
        type: type,
      );
      if(_responPostProducts == "berhasil"){
        emit(AddPostBarang(loading: false, snackBar: true, responApi: _responPostProducts));
        _clearPrefs();
      }else{
        emit(AddPostBarang(loading: false, snackBar: true, responApi: _responPostProducts));
      }
    }

    void _clearPrefs(){
      prefs.remove('namaProduct');
      prefs.remove('deskripsi');
      prefs.remove('price');
      prefs.remove('typeProduct');
      prefs.remove('indexDropdown');
    }
  }

  contoh penerapan Encapsulation dalam Widget:
  - screenshot widget
    class SplashScreen extends StatelessWidget{
      SplashScreen({Key? key }) : super(key: key);

      @override
      Widget build(BuildContext context) {
        ThemeBox(context);
        SplashScreenUserRole().splashScreenUserRole(context: context);
        return Scaffold(
          backgroundColor: kPrimaryColor,
          body: Center(child: ComponenLoadingLottieBasic(height: ThemeBox.defaultHeightBox200)),
        );
      }
    }
  - screenshot componen
    class ComponenLoadingLottieBasic extends StatelessWidget {
      final double height;
      const ComponenLoadingLottieBasic({Key? key, required this.height}) : super(key: key);

      @override
      Widget build(BuildContext context) {
        return Center(
          child: Lottie.asset(
            "asset/animations/loading_basic_lottie.json",
            height: height,
          ),
        );
      }
    }
  
  Dalam kasus widget, ComponenLoadingLottieBasic merupakan detail implementasi.
  Dengan menjadikan ComponenLoadingLottieBasic sebagai detail implementasi, membuat isi widget didalam ComponenLoadingLottieBasic tidak diketahui oleh class yang memanggilnya,
  sehingga menciptakan batasan privat bagi ComponenLoadingLottieBasic.

==============================================================================================

- Inheritance 


  contoh :
  class StateAddPostBarang{
    bool loading;
    bool snackBar;
    String responApi;
    StateAddPostBarang(this.loading, this.snackBar, this.responApi);
  }

  class AddPostBarang extends StateAddPostBarang{
    AddPostBarang({
      required bool loading,
      required bool snackBar,
      required String responApi,
    })
    : super(loading, snackBar, responApi);
  }





perbedaan dan hubungan :
- (Mixin)penggunaan mixin tidak sah jika digunakan untuk inheritance,
  walaupun seringkali mixin dapat mewarisi metode yang ada didalamnya, 
  tetapi secara aturan mixin seharusnya dilakukan untuk melengkapi class turunan, 
  analoginya sama seperti makan nasi menggunakan garpu, walaupun bisa, tetapi tidak seharusnya.

- (Abstract,Polymorphism)perbedaan antara abstract dan polymorphism terletak pada tujuan pembuatannya, 
  walaupun seringkali dibuat dengan code yang sama, 
  - tapi tujuan abstract adalah untuk memberikan blueprint/kerangka yang dapat diimplemtasikan oleh class turunan, 
  - sedangkan tujuan dari polymorphism agar suatu metode dapat diimplementasikan di berbagai objek/class, 
    salah satu cara mengimplmentasikannya dengan cara interface, 
  - analoginya seperti sendok yang bagi orang biasa digunakan untuk makan, 
    tetapi bagi koki digunakan untuk memasak dan mencicipi masakan, 
    jadi sendok tidak selalu tujuannya digunakan untuk makan, 
    sama halnya dengan abstract tidak selalu tujuannya digunakan untuk medefinisikan kerangka/blueprint suatu class, 
    tapi bisa juga untuk membagikan metode yang sama di banyak objek.

- (Inheritance,Polymorphism)perbedaan antara inheritance dengan polymorphism sedikit berbeda dengan polymorphism dan abstract, 
  - dimana inheritance digunakan untuk menurunkan prilaku yang telah diwariskan oleh suatu perent/abstract, 
  - sedangkan polymorphism digunakan untuk menerapkan suatu perent/abstract yang sama di berbagai objek/class,
  - dalam artian jika suatu abstract diturunkan pada suatu class maka dapat diartikan implementasi inheritance, 
  - sedangkan jika suatu abstract diturunkan di banyak objek/class yang berbeda dengan penggunaan yang berbeda dapat diartikan sebagai polymorphism, 
  - jadi polymorphism merupakan lanjutan dari inheritance

- (Abstract,Inheritance,Polymorphism)
  - inheritance dan abstraction merupakan cara untuk menghubungkan parent ke child dengan cara yang berbeda dan tujuan yang berbeda, 
    namun polymorphism menggunakan kedua konsep tersebut untuk menghubungkan antara parent dan child, 
      - namun inti sebenarnya dari polymorphism adalah penggunaan metode yang sama pada class yang berbeda dan dengan tujuan yang berbeda.
  - inheritance dan abstraction memiliki tujuan yang berbeda dalam menghubungkan parent dengan child, 
    sedangkan polymorphism memanfaatkan konsep inheritance dan abstraction untuk memungkinkan penggunaan metode yang sama pada kelas yang berbeda dengan perilaku yang berbeda. 
    Polymorphism memberikan fleksibilitas dan adaptabilitas dalam desain dan pengembangan aplikasi.
  - konsep polymorphism dapat berlaku pada mixin. 
    Mixin dapat memberikan perilaku tertentu kepada berbagai kelas tanpa memerlukan hierarki warisan yang kaku.

